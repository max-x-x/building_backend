# Generated by Django 5.2.6 on 2025-09-26 18:30

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_workitem_invitation_modified_at_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('uuid_notification', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID уведомления')),
                ('to_role', models.CharField(blank=True, max_length=16, verbose_name='Роль (если широкая рассылка)')),
                ('type', models.CharField(choices=[('activation_requested', 'Запрошена активация'), ('iko_assigned', 'Назначен ИКО'), ('visit_action_needed', 'Нужна заявка на посещение'), ('qr_needed', 'Нужен QR для визита'), ('qr_assigned', 'QR выдан'), ('violations_found', 'Найдены нарушения'), ('prescription_fixed', 'Исправление предписания'), ('activation_approved', 'Активация одобрена')], max_length=32, verbose_name='Тип')),
                ('payload', models.JSONField(blank=True, default=dict, verbose_name='Данные')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='api.constructionobject', verbose_name='Объект')),
                ('to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Кому')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ObjectActivation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('uuid_activation', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID активации')),
                ('status', models.CharField(choices=[('requested', 'Заявка отправлена (ССК)'), ('visit_planned', 'Визит ИКО запланирован'), ('checked', 'ИКО провёл проверку'), ('approved', 'Активация одобрена ИКО'), ('rejected', 'Отклонена ИКО')], default='requested', max_length=32, verbose_name='Статус')),
                ('ssk_checklist', models.JSONField(blank=True, default=dict, verbose_name='Чек-лист ССК')),
                ('ssk_checklist_pdf', models.URLField(blank=True, verbose_name='PDF чек-лист ССК')),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Отправлено')),
                ('iko_checklist', models.JSONField(blank=True, default=dict, verbose_name='Чек-лист ИКО')),
                ('iko_checklist_pdf', models.URLField(blank=True, verbose_name='PDF чек-лист ИКО')),
                ('iko_has_violations', models.BooleanField(default=False, verbose_name='Найдены нарушения ИКО')),
                ('iko_checked_at', models.DateTimeField(blank=True, null=True, verbose_name='Проверено ИКО')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Одобрено ИКО')),
                ('rejected_reason', models.TextField(blank=True, verbose_name='Причина отклонения')),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activations', to='api.constructionobject', verbose_name='Объект')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='activation_requests', to=settings.AUTH_USER_MODEL, verbose_name='ССК-инициатор')),
            ],
            options={
                'verbose_name': 'Активация объекта',
                'verbose_name_plural': 'Активации объектов',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('uuid_prescription', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID предписания')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('requires_stop', models.BooleanField(default=False, verbose_name='Требует приостановки работ')),
                ('requires_personal_recheck', models.BooleanField(default=False, verbose_name='Нужна личная перепроверка')),
                ('attachments', models.JSONField(blank=True, default=list, verbose_name="Вложения (URL'ы)")),
                ('status', models.CharField(choices=[('open', 'Открыто'), ('awaiting_verification', 'Ожидает проверки'), ('closed', 'Закрыто')], default='open', max_length=32, verbose_name='Статус')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Закрыто')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prescriptions_created', to=settings.AUTH_USER_MODEL, verbose_name='Автор (ИКО/ССК)')),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='api.constructionobject', verbose_name='Объект')),
            ],
            options={
                'verbose_name': 'Предписание',
                'verbose_name_plural': 'Предписания',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionFix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('uuid_fix', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID исправления')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('attachments', models.JSONField(blank=True, default=list, verbose_name="Вложения (URL'ы)")),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Кто исправил (Прораб)')),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fixes', to='api.prescription', verbose_name='Предписание')),
            ],
            options={
                'verbose_name': 'Исправление предписания',
                'verbose_name_plural': 'Исправления предписаний',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QrCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('uuid_qr', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID QR')),
                ('token', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='Токен QR')),
                ('valid_from', models.DateTimeField(verbose_name='Действителен с')),
                ('valid_to', models.DateTimeField(verbose_name='Действителен до')),
                ('geojson', models.JSONField(blank=True, default=dict, verbose_name='Геофенс (полигон/мультиполигон)')),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qr_codes', to='api.constructionobject', verbose_name='Объект')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='qr_codes', to=settings.AUTH_USER_MODEL, verbose_name='Кому выдан (обычно ИКО)')),
            ],
            options={
                'verbose_name': 'QR-код посещения',
                'verbose_name_plural': 'QR-коды посещений',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VisitRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('uuid_visit', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID заявки')),
                ('planned_at', models.DateTimeField(blank=True, null=True, verbose_name='Планируемое время')),
                ('status', models.CharField(choices=[('pending', 'Ожидает QR'), ('qr_assigned', 'QR назначен'), ('done', 'Визит состоялся'), ('cancelled', 'Отменено')], default='pending', max_length=16, verbose_name='Статус')),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_requests', to='api.constructionobject', verbose_name='Объект')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='visit_requests_created', to=settings.AUTH_USER_MODEL, verbose_name='Кто запросил')),
            ],
            options={
                'verbose_name': 'Заявка на посещение',
                'verbose_name_plural': 'Заявки на посещение',
                'ordering': ['-created_at'],
            },
        ),
    ]
