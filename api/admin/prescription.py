from django.contrib import admin
from django.utils.html import format_html
from django.utils.safestring import mark_safe

from api.models.prescription import Prescription, PrescriptionFix


class FixInline(admin.TabularInline):
    model = PrescriptionFix
    extra = 0
    readonly_fields = ("author", "comment", "attachments", "created_at", "modified_at")
    fields = ("author", "comment", "attachments", "created_at")
    classes = ("collapse",)


@admin.register(Prescription)
class PrescriptionAdmin(admin.ModelAdmin):
    list_display = ("id", "object", "author", "title_short", "status_badge", "requires_stop_badge", "requires_personal_recheck_badge", "created_at", "closed_at")
    list_filter = ("status", "requires_stop", "requires_personal_recheck", "created_at")
    search_fields = ("object__name", "author__email", "title", "description")
    readonly_fields = ("created_at", "modified_at", "closed_at")
    autocomplete_fields = ("object", "author")
    list_per_page = 25
    inlines = [FixInline]

    fieldsets = (
        ("üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            "fields": ("object", "author", "title", "description", "status"),
            "classes": ("wide",)
        }),
        ("‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", {
            "fields": ("requires_stop", "requires_personal_recheck"),
            "classes": ("wide",)
        }),
        ("üìé –í–ª–æ–∂–µ–Ω–∏—è", {
            "fields": ("attachments", "violation_photos_folder_url"),
            "classes": ("collapse",)
        }),
        ("üìÖ –î–∞—Ç—ã", {
            "fields": ("created_at", "closed_at", "modified_at"),
            "classes": ("collapse",)
        }),
    )

    def title_short(self, obj):
        """–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è."""
        if len(obj.title) > 50:
            return f"{obj.title[:50]}..."
        return obj.title
    title_short.short_description = "–ù–∞—Ä—É—à–µ–Ω–∏–µ"

    def status_badge(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º."""
        colors = {
            "open": "#dc3545",              # –∫—Ä–∞—Å–Ω—ã–π
            "awaiting_verification": "#ffc107", # –∂–µ–ª—Ç—ã–π
            "closed": "#28a745",            # –∑–µ–ª–µ–Ω—ã–π
        }
        color = colors.get(obj.status, "#6c757d")
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">{}</span>',
            color, obj.get_status_display()
        )
    status_badge.short_description = "–°—Ç–∞—Ç—É—Å"
    status_badge.admin_order_field = "status"

    def requires_stop_badge(self, obj):
        """–¢—Ä–µ–±—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç."""
        if obj.requires_stop:
            return format_html('<span style="color: #dc3545;">üõë –î–∞</span>')
        return format_html('<span style="color: #28a745;">‚úÖ –ù–µ—Ç</span>')
    requires_stop_badge.short_description = "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç"
    requires_stop_badge.admin_order_field = "requires_stop"

    def requires_personal_recheck_badge(self, obj):
        """–¢—Ä–µ–±—É–µ—Ç –ª–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        if obj.requires_personal_recheck:
            return format_html('<span style="color: #ffc107;">üë§ –î–∞</span>')
        return format_html('<span style="color: #6c757d;">‚ùå –ù–µ—Ç</span>')
    requires_personal_recheck_badge.short_description = "–õ–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    requires_personal_recheck_badge.admin_order_field = "requires_personal_recheck"


@admin.register(PrescriptionFix)
class PrescriptionFixAdmin(admin.ModelAdmin):
    list_display = ("prescription", "author", "comment_short", "created_at")
    list_filter = ("created_at",)
    search_fields = ("prescription__title", "author__email", "comment")
    readonly_fields = ("created_at", "modified_at")
    autocomplete_fields = ("prescription", "author")
    list_per_page = 25

    fieldsets = (
        ("üìã –ù–∞—Ä—É—à–µ–Ω–∏–µ", {
            "fields": ("prescription",),
            "classes": ("wide",)
        }),
        ("üë§ –ê–≤—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", {
            "fields": ("author",),
            "classes": ("wide",)
        }),
        ("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", {
            "fields": ("comment",),
            "classes": ("wide",)
        }),
        ("üìé –í–ª–æ–∂–µ–Ω–∏—è", {
            "fields": ("attachments", "fix_photos_folder_url"),
            "classes": ("collapse",)
        }),
        ("üìÖ –î–∞—Ç—ã", {
            "fields": ("created_at", "modified_at"),
            "classes": ("collapse",)
        }),
    )

    def comment_short(self, obj):
        """–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
        if len(obj.comment) > 100:
            return f"{obj.comment[:100]}..."
        return obj.comment
    comment_short.short_description = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
